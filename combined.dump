const winston = require('winston');
// Configure the logger
const logger = winston.createLogger({
    level: 'debug',
    format: winston.format.combine(
        winston.format.timestamp(),
        winston.format.json()
    ),
    transports: [
        new winston.transports.Console(),
        new winston.transports.File({ filename: 'debug.log' })
    ]
});

function handleAddPeerEvent(ip, pubkey) {
    try {
        semaphore.acquire();

        readWgConfig((config, error) => {
            if (error) {
                logger.error(`File: newPeerHandler.js: Failed to read WireGuard configuration for ADD_PEER event: ${error}`);
                return;
            }

            if (!config) {
                logger.error('File: wgEventHandler.js: Empty WireGuard configuration for ADD_PEER event.');
                return;
            }

            const updatedConfig = updateConfigWithNewPeer(config, ip, pubkey);
            logger.debug(`File: newPeerHandler.js: Updated configuration prepared for ADD_PEER event.');
            writeTempWgConfig(tempConfigPath, updatedConfig);
            applyWgConfig(tempConfigPath);

            semaphore.release();
        });
    } catch (error) {
        logger.error(`File: newPeerHandler.js: Error acquiring semaphore: ${error.message}`);
    }
}// File: readFunctions.js
const winston = require('winston');
const { exec } = require('child_process'); // Add this import

// Configure the logger
const logger = winston.createLogger({
    level: 'debug',
    format: winston.format.combine(
        winston.format.timestamp(),
        winston.format.json()
    ),
    transports: [
        new winston.transports.Console(),
        new winston.transports.File({ filename: 'debug.log' })
    ]
});

/**
 * Reads the WireGuard configuration file using 'wg syncconf'.
 * @param {Function} callback - The callback function to handle the read configuration.
 */
function readWgConfig(callback) {
    logger.debug(`Reading WireGuard configuration using 'wg syncconf'`);
    
    // Log the start of the function
    logger.debug('File: readFunctions.js: Start reading WireGuard configuration.');

    exec(`sudo wg syncconf wg0 -`, (error, stdout, stderr) => {
        if (error) {
            // Log the error
            logger.error(`Error reading WireGuard configuration: ${error.message}`);
            callback(null, error); // Pass both null data and error to the callback
        } else if (stderr) {
            // Log the stderr output
            logger.error(`Error reading WireGuard configuration: ${stderr}`);
            callback(null, stderr); // Pass both null data and stderr to the callback
        } else {
            // Log success and data
            logger.debug(`WireGuard configuration read successfully.`);
            logger.debug(`Configuration data: ${stdout}`);
            callback(stdout, null); // Pass the configuration data and null error to the callback
        }

        // Log the end of the function
        logger.debug('File: readFunctions.js: End reading WireGuard configuration.');
    });
}


module.exports = {
    readWgConfig
};
const http = require('http');
const winston = require('winston');
const retry = require('retry');

// Configure the logger
const logger = winston.createLogger({
    level: 'debug',
    format: winston.format.combine(
        winston.format.timestamp(),
        winston.format.json()
    ),
    transports: [
        new winston.transports.Console(),
        new winston.transports.File({ filename: 'debug.log' })
    ]
});

function initializeSSE(sseUrl, processInsertEvent, processDeleteEvent) {
    const retryOptions = {
        retries: 5, // Number of times to retry the request
        factor: 1000, // Exponential backoff factor
        minTimeout: 1000, // Minimum timeout between retries
        maxTimeout: 5000 // Maximum timeout between retries
    };

    retry(async () => {
        const request = http.request(sseUrl, (response) => {
            response.on('data', (data) => {
                try {
                    const parsedData = JSON.parse(data);

                    if (parsedData.type === 'INSERT') {
                        const { ipv4_address, pubkey } = parsedData.data;
                        logger.debug(`Processing INSERT event for IP: ${ipv4_address} with pubkey: ${pubkey}`);
                        processInsertEvent(ipv4_address, pubkey);
                    } else if (parsedData.type === 'DELETE') {
                        const { ipv4_address } = parsedData.data;
                        logger.debug(`Processing DELETE event for IP: ${ipv4_address}`);
                        processDeleteEvent(ipv4_address);
                    }
                } catch (error) {
                    logger.error(`Error processing event: ${error.message}`);
                }
            });

            response.on('error', (error) => {
                logger.error(`Error receiving data from server: ${error.message}`);
            });

            response.on('end', () => {
                logger.debug('Connection to server closed.');
            });
        });

        try {
            await request.end();
        } catch (error) {
            // Handle error here, e.g. retry
            logger.error('Error sending request:', error);
        }
    }, retryOptions);
}

module.exports = {
    initializeSSE
};
const { readWgConfig } = require('./readFunctions');
const { writeTempWgConfig, applyWgConfig } = require('./writeFunctions');
const winston = require('winston');
const util = require('util');
const { exec } = require('child_process');
const { createSemaphore } = require('ws');
const semaphore = createSemaphore(1);

const { processRemovePeerFromConfig } = require('./sseHandler');
const { processAddPeerEvent } = require('./newPeerHandler');

initializeSSE(sseUrl, processAddPeerEvent, processRemovePeerFromConfig);

// Configure the logger
const logger = winston.createLogger({
    level: 'debug',
    format: winston.format.combine(
        winston.format.timestamp(),
        winston.format.json()
    ),
    transports: [
        new winston.transports.Console(),
        new winston.transports.File({ filename: 'debug.log' })
    ]
});

const sseUrl = 'https://api.unblockvpn.io/sse/events';
const wgConfPath = '/etc/wireguard/wg0.conf';
const tempDir = '/home/unblockvpnio/';
const tempConfigPath = tempDir + 'wg0.conf.update.temp';

function processAddPeerEvent(ip, pubkey) {
    try {
        semaphore.acquire();

        readWgConfig((config, error) => {
            if (error) {
                logger.error(`File: wgEventHandler.js: Failed to read WireGuard configuration for ADD_PEER event: ${error}`);
                return;
            }

            if (!config) {
                logger.error('File: wgEventHandler.js: Empty WireGuard configuration for ADD_PEER event.');
                return;
            }

            const updatedConfig = updateConfigWithNewPeer(config, ip, pubkey);
            logger.debug('File: wgEventHandler.js: Updated configuration prepared for ADD_PEER event.');
            writeTempWgConfig(tempConfigPath, updatedConfig);
            applyWgConfig(tempConfigPath);

            semaphore.release();
        });
    } catch (error) {
        logger.error(`File: wgEventHandler.js: Error acquiring semaphore: ${error.message}`);
    }
}

function processRemovePeerEvent(ip) {
    logger.debug(`File: wgEventHandler.js: Initiating processRemovePeerEvent for IP: ${ip}`);
    readWgConfig(wgConfPath, config => {
        if (!config) {
            logger.error('File: wgEventHandler.js: Failed to read WireGuard configuration for REMOVE_PEER event.');
            return;
        }
        const updatedConfig = removePeerFromConfig(config, ip);
        logger.debug('File: wgEventHandler.js: Updated configuration prepared for REMOVE_PEER event.');
        writeTempWgConfig(tempConfigPath, updatedConfig);
        applyWgConfig(tempConfigPath);
    });
}

function updateConfigWithNewPeer(config, ip, pubkey) {
    logger.debug(`File: wgEventHandler.js: Updating config with new peer: IP - ${ip}, pubkey - ${pubkey}`);

    // Logic to update the configuration with the new peer.
    // Make sure to return the updated configuration.
    // Replace with actual update logic.
    return config; // Replace with actual update logic.
}

function removePeerFromConfig(config, ip) {
    logger.debug(`File: wgEventHandler.js: Removing peer from config: IP - ${ip}`);

    // Logic to remove the specified peer from the configuration.
    // Make sure to return the updated configuration.
    // Replace with actual removal logic.
    return config; // Replace with actual removal logic.
}

// File: writeFunctions.js
const fs = require('fs');
const { exec } = require('child_process');
const winston = require('winston');

// Configure the logger
const logger = winston.createLogger({
    level: 'debug',
    format: winston.format.combine(
        winston.format.timestamp(),
        winston.format.json()
    ),
    transports: [
        new winston.transports.Console(),
        new winston.transports.File({ filename: 'debug.log' })
    ]
});

/**
 * Writes the temporary WireGuard configuration.
 * @param {string} tempConfigPath - The path to the temporary configuration file.
 * @param {string} config - The configuration data to be written.
 */
function writeTempWgConfig(tempConfigPath, config) {
    logger.debug(`File: writeFunctions.js: Attempting to write configuration to temp file: ${tempConfigPath}`);
    try {
        fs.writeFileSync(tempConfigPath, config, 'utf8');
        logger.debug(`File: writeFunctions.js: Configuration successfully written to temp file.`);
    } catch (error) {
        logger.error(`File: writeFunctions.js: Error writing to temp file: ${error.message}`);
    }
}

/**
 * Applies the WireGuard configuration using the 'wg syncconf' command.
 * @param {string} tempConfigPath - The path to the temporary configuration file.
 */
function applyWgConfig(tempConfigPath) {
    logger.debug(`File: writeFunctions.js: Preparing to execute wg syncconf with temp file: ${tempConfigPath}`);
    exec(`sudo wg syncconf wg0 ${tempConfigPath}`, (error, stdout, stderr) => {
        if (error) {
            logger.error(`File: writeFunctions.js: Error applying wg config: ${error.message}`);
            return;
        }
        if (stderr) {
            logger.error(`File: writeFunctions.js: stderr applying wg config: ${stderr}`);
            return;
        }
        logger.debug(`File: writeFunctions.js: WireGuard configuration applied successfully from ${tempConfigPath}`);
        if (stdout) {
            logger.debug(`File: writeFunctions.js: stdout from wg syncconf: ${stdout}`);
        }
    });
}

module.exports = {
    writeTempWgConfig,
    applyWgConfig
};
